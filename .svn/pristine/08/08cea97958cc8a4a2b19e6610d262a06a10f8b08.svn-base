// $Id$ $Revision$

package ac.uk.rhul.zhac067.calculator;

import ac.uk.rhul.zhac067.calculator.postfix.InvalidExpressionException;
import ac.uk.rhul.zhac067.calculator.postfix.RevPolishCalc;
import ac.uk.rhul.zhac067.calculator.standard.StandardCalc;
import ac.uk.rhul.zhac067.calculator.views.ViewInterface;

/**
 * The controller.
 * @author zhac067
 *
 */
public class CalcController {
  private ViewInterface view;
  private CalculatorInterface currentEvaluator;

  /**
   * Create a new controller and register it as an observer to a given view.
   * 
   * @param view the view to observe.
   */
  public CalcController(ViewInterface view) {
    this.view = view;
    currentEvaluator = new RevPolishCalc();
    view.addCalcObserver(this::handleCalculate);
    view.addTypeObserver(this::handleChangeState);
    view.menu();
  }

  /**
   * Handles the evaluation.
   */
  public void handleCalculate() {
    String expression = view.getUserInput();
    try {
      Float result = currentEvaluator.evaluate(expression);
      view.setAnswer(result.toString());
    } catch (InvalidExpressionException e) {
      view.setAnswer("Invalid expression.");
    }
  }

  /**
   * Handler to change the type of calculator in use.
   */
  public void handleChangeState() {
    currentEvaluator = (currentEvaluator.getClass() == RevPolishCalc.class) ? new StandardCalc()
        : new RevPolishCalc();
    System.out.println("Evaluator model set to " + currentEvaluator.getClass());
  }
  
  /**
   * Returns the current evaluator.
   */
  public CalculatorInterface getCurrentEvaluator() {
    return currentEvaluator;
  }
}
